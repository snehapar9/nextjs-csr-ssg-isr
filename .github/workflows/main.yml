on: 
 workflow_dispatch:
  inputs:
   base-image:
     description: 'Base image'
     default: 'mcr.microsoft.com/oryx/build:azfunc-jamstack-debian-bullseye-20221214.1'
   application-location:
      description: 'Application location'
      default: '/'   

jobs:
  oryx_build_job:
    runs-on: ubuntu-latest
    name: Oryx build
    steps:
      # To use this repository's private action,
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v3  
      - name: Install Azure-cli
        uses: elstudio/action-install-azure-cli@v1
      - name: Log into registry
        uses: azure/login@v1
        with:
         creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v2.0.0
        with: 
         registry: jamstacktest.azurecr.io
         username: ${{ secrets.AZURE_CLIENT_ID }}
         password: ${{ secrets.AZURE_CLIENT_SECRET }} 
       # This is a separate action that sets up buildx runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1    
      # - name: Cache docker layers
      # uses: actions/cache@v2
      # with:
      #   path: /tmp/.buildx-cache
      #   key: ${{ runner.os }}-buildx-${{ github.sha }}
      #   restore-keys: |
      #     ${{ runner.os }}-buildx-    
      # - uses: docker/setup-buildx-action@v1
      # - uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max 
      # - name: Cache Docker layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-
      # - name: Login to DockerHub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # And make it available for builds
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: mcr.microsoft.com/oryx/build:azfunc-jamstack-debian-bullseye-20221214.1
          cache-from: type=gha
          cache-to: type=gha,mode=max
        # This ugly bit is necessary if you don't want your cache to grow forever
        # until it hits GitHub's limit of 5GB.
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      # - name: Move cache
      #   run: |
      #     rm -rf /tmp/.buildx-cache
      #     mv /tmp/.buildx-cache-new /tmp/.buildx-cache  
      - name: Docker image ls
        run: docker image ls --digests --no-trunc
      - uses: actions/checkout@v3
        with:
          repository: microsoft/oryx
          ref: snehapar/Install-deps-dynamically  
      - name: Build application - jamstack-bullseye
        run: docker run --rm -v $(pwd)/tests/SampleApps/nodejs/angular14app:/app mcr.microsoft.com/oryx/build:azfunc-jamstack-debian-bullseye-20221214.1@sha256:9614941afe5871358356dfffb8b0b15ae1ad049264ee1137b10d4306352e350e oryx build /app      
      # - name: Cache NPM dependencies
      #   uses: actions/cache@v3
      #   with:
      #    path: tmp
      #    key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
      #    restore-keys: |
      #     ${{ runner.OS }}-npm-cache-            
      # - name: Oryx build step
      #   uses: ./ # Uses an action in the root directory
      #   id: oryx-build
      #   with:
      #     app-location: "/"
  oryx_cli_build_job:
    runs-on: ubuntu-latest
    name: Oryx cli build
    steps:
      # To use this repository's private action,
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v3  
      - name: Install Azure-cli
        uses: elstudio/action-install-azure-cli@v1
      - name: Log into registry
        uses: azure/login@v1
        with:
         creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v2.0.0
        with: 
         registry: jamstacktest.azurecr.io
         username: ${{ secrets.AZURE_CLIENT_ID }}
         password: ${{ secrets.AZURE_CLIENT_SECRET }} 
       # This is a separate action that sets up buildx runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1    
      # - name: Cache docker layers
      # uses: actions/cache@v2
      # with:
      #   path: /tmp/.buildx-cache
      #   key: ${{ runner.os }}-buildx-${{ github.sha }}
      #   restore-keys: |
      #     ${{ runner.os }}-buildx-    
      # - uses: docker/setup-buildx-action@v1
      # - uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max 
      # - name: Cache Docker layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-
      # - name: Login to DockerHub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # And make it available for builds
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./cli-docker
          push: false
          tags: jamstacktest.azurecr.io/oryx/cli-bullseye:v2
          cache-from: type=gha
          cache-to: type=gha,mode=max
        # This ugly bit is necessary if you don't want your cache to grow forever
        # until it hits GitHub's limit of 5GB.
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      # - name: Move cache
      #   run: |
      #     rm -rf /tmp/.buildx-cache
      #     mv /tmp/.buildx-cache-new /tmp/.buildx-cache  
      - uses: actions/checkout@v3
        with:
          repository: microsoft/oryx
          ref: snehapar/Install-deps-dynamically  
      - name: Build application - jamstack-bullseye
        run: docker run --rm -v $(pwd)/tests/SampleApps/nodejs/angular14app:/app jamstacktest.azurecr.io/oryx/cli-bullseye:v2@sha256:04f16cdb45cc6e8fc40fbb94cc61bfa04689cacc713170500b68f3cae983997a oryx build /app      
      # - name: Cache NPM dependencies
      #   uses: actions/cache@v3
      #   with:
      #    path: tmp
      #    key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
      #    restore-keys: |
      #     ${{ runner.OS }}-npm-cache-            
      # - name: Oryx build step
      #   uses: ./ # Uses an action in the root directory
      #   id: oryx-build
      #   with:
      #     app-location: "/"    
  Deploy-preview-Vercel:
    runs-on: ubuntu-latest
    name: Deploy to Vercel
    steps:   
      - name: Install vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run:  vercel pull --yes --environment=development --token=${{ secrets.VERCEL_TOKEN }} 
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --token=${{ secrets.VERCEL_TOKEN }}  
  # netlify-build:
  #   name: Netlify build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Curl request
  #       run: curl -X POST -d {} https://api.netlify.com/build_hooks/63a18125241d2b63140db12e   

  # Deploy-Netlify:
  #   runs-on: ubuntu-latest
  #   name : Deploy to Netlify
  #   env:
  #         NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  #         NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  #         publish-dir: '.next'

  #   steps:
  #     - name: Install netlify cli
  #       run: npm install netlify-cli -g
  #     - name: Log in to netlify
  #       run: netlify login 
  #     - name: Run build
  #       run: netlify build
  #     - name: Deploy to netlify
  #       run: netlify deploy 
      # - name: Deploy to Netlify
      #   uses: nwtgck/actions-netlify@v1.2
      #   with:
      #     publish-dir: './'
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     deploy-message: "Deploy from GitHub Actions"
      #   env:
      #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        